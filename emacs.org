#+TITLE: Emacs Configuration
#+OPTIONS:   H:4 num:nil toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:t ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+STYLE:    <link rel="stylesheet" type="text/css" href="/static/files/emacs-config.css" />

This file is used by [[http://orgmode.org/worg/org-contrib/babel/intro.php#sec-8_2_1][org-babel]] to generate ~emacs.el~ from
it. ~emacs.el~ is then loaded as my Emacs configuration and only
re-generated when the org file changes. Ideas taken from from Andi Albrecht https://raw.githubusercontent.com/andialbrecht/emacs-config/master/emacs.org
* Globals
All lisp files needed to run this configuration are either installed
by system packages. Or found in the same directory where this
configuration file lives. The path to this configuration directory is
bound to ~dotfiles-dir~ in the main ~init.el~.

* Packages
** Install packages using use-package
*** Initializing use-package u
Use-package should be placed in the lisp/use-package folder by 
#+BEGIN_SRC 
#cd lisp
# git clone https://github.com/jwiegley/use-package.git
git submodule add https://github.com/jwiegley/use-package.git 
#+END_SRC
Load the use-package macro:
#+BEGIN_SRC emacs-lisp

(add-to-list 'load-path "~/.emacs.d/lisp/use-package")
(setq use-package-verbose t)
(require 'use-package)

#+END_SRC
Initialize the package.el locations and load a list of packages if not available, so that use-package will not fail.
#+BEGIN_SRC emacs-lisp
(setq package-archives '(("melpa" . "http://melpa.milkbox.net/packages/")
                         ("gnu" . "http://elpa.gnu.org/packages/")))
;(package-refresh-contents)
(package-initialize)
(when (not package-archive-contents) (package-refresh-contents))

#+END_SRC
Make all packages be auto-compiled; Load Dash first as a requirement for auto-compile. TODO: Check for other issues to be done [[Here][https://github.com/tarsius/auto-compile]].
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package dash
    :ensure t)
  (use-package auto-compile
    :ensure t
    :init (auto-compile-on-load-mode))
  (setq load-prefer-newer t)
#+END_SRC
*** Defining functions needed for package config
#+BEGIN_SRC emacs-lisp
  (defun pragtich/magit-commit-save ()
  (interactive)
  (git-commit-commit))
#+END_SRC
*** Defining my customized packages and keybindings
#+BEGIN_SRC emacs-lisp
    (use-package magit
      :commands magit-status
      :bind (("C-x g" . magit-status) 
             ("<f12>" . magit-status))
      :config (eval-after-load "magit-commit-mode"
                '(define-key git-commit-mode-map (kbd "C-c C-c") 'pragtich/magit-commit-save))
      :ensure t
      :pin melpa
    )
    (use-package git-gutter-fringe
      :ensure t
      :config (global-git-gutter-mode +1))


    (use-package ido-vertical-mode
      :ensure t
      :init
        (progn (ido-mode 1) 
           (ido-vertical-mode 1))

      :config 
        (progn
           (setq ido-enable-flex-matching t)
           (setq ido-everywhere t)
           (setq ido-create-new-buffer 'always)  ;Prevent IDO from asking when I just want to make a scratch buffer.
           (setq ido-ignore-extensions t)        ;Ignore predefined useless extensions which are defined in =completion-ignored-extensions=.
        ))
    (use-package ido-ubiquitous
      :ensure t
      :init
        (ido-ubiquitous-mode 1)

      :config 
        (progn
           (setq ido-ubiquitous-command-overrides
             (cons '(enable exact "execute-extended-command") ido-ubiquitous-default-command-overrides)))
      
    )

    (use-package cl-lib
      :ensure t)
    ;; (use-package zenburn-theme
    ;;    :ensure t
    ;;    :defer t
    ;;    :config   (load-theme 'zenburn t)
    ;; )

    (use-package color-theme-sanityinc-solarized
       :ensure t
       :config   (progn
         (load-theme 'sanityinc-solarized-dark t)
	 (custom-set-faces
	   '(cursor ((t (:background "blue1")))))
	   )
	 (setq-default cursor-type 'bar)
	 (global-hl-line-mode t)
	 (set-face-background hl-line-face "#042028") ; Base03 from solarized
	  )

  ;  (use-package git-modes
  ;    :ensure t)
  ;  (use-package versions)

    (use-package benchmark-init
      :ensure t)
    (use-package markdown-mode
      :ensure t
      :mode "\\.\\(m\\(ark\\)?down\\|md\\)$")
    (use-package headlong
        :ensure t)
    (use-package hydra
        :pin melpa
        :ensure t)
    (use-package key-chord
        :ensure t)
#+END_SRC

* Magit configuration
*** Magit general
**** Last version release notes
Really annoying that magit keeps interrupting me
#+BEGIN_SRC emacs-lisp
 (setq magit-last-seen-setup-instructions "1.4.0")

#+END_SRC
*** Windows specific
GIT on Windows does not play nicely with EMACS. This is a hack to fix that and show a GUI password box instead of the normal one. Ugly.
 TODO Check if this works also in OS X

#+begin_src emacs-lisp
   (setenv "GIT_ASKPASS" "git-gui--askpass")
#+end_src
Adding the following to =.git/config= helps to avoid typing the username over and over:
#+begin_src 
[credential "https://github.com"]
	username = pragtich
#+end_src
Also, it is very slow when the PATH is not clear. This may help: (https://stackoverflow.com/questions/16884377/magit-is-very-slow-when-committing-on-windows)
#+begin_src emacs-lisp
 (if (eq system-type 'windows-nt)
    (progn
    (setq exec-path (add-to-list 'exec-path "C:/Users/jpg/Documents/Progs/Git/bin"))
     ))
#+end_src
Finally, add emacsclientw to git as the editor in git (vim is the present default and does not work nicely with emacs)
#+BEGIN_SRC 
git config --global core.editor C:/Users/JPG/Documents/Progs/Emacs/bin/emacsclientw.exe
Test using git config --global --edit
#+END_SRC
Start server on Windows
#+BEGIN_SRC emacs-lisp
(when (eq system-type 'windows-nt)
   (server-start))

#+END_SRC
**** TODO Change GIT_ASKPASS item in emacs.org to only act on Windows (test on OSX)
* Hydras
** Navigating buffer menu
From [[https://github.com/abo-abo/hydra][the hydra documentation]], an example. Press =.= in the Buffer menu (=C-x C-b=) and get the following choices:
#+BEGIN_SRC emacs-lisp

(defhydra hydra-buffer-menu (:color pink
                             :hint nil)
  "
^Mark^             ^Unmark^           ^Actions^          ^Search
^^^^^^^^-----------------------------------------------------------------
_m_: mark          _u_: unmark        _x_: execute       _R_: re-isearch
_s_: save          _U_: unmark up     _b_: bury          _I_: isearch
_d_: delete        ^ ^                _g_: refresh       _O_: multi-occur
_D_: delete up     ^ ^                _T_: files only: % -28`Buffer-menu-files-only
_~_: modified
"
  ("m" Buffer-menu-mark)
  ("u" Buffer-menu-unmark)
  ("U" Buffer-menu-backup-unmark)
  ("d" Buffer-menu-delete)
  ("D" Buffer-menu-delete-backwards)
  ("s" Buffer-menu-save)
  ("~" Buffer-menu-not-modified)
  ("x" Buffer-menu-execute)
  ("b" Buffer-menu-bury)
  ("g" revert-buffer)
  ("T" Buffer-menu-toggle-files-only)
  ("O" Buffer-menu-multi-occur :color blue)
  ("I" Buffer-menu-isearch-buffers :color blue)
  ("R" Buffer-menu-isearch-buffers-regexp :color blue)
  ("c" nil "cancel")
  ("v" Buffer-menu-select "select" :color blue)
  ("o" Buffer-menu-other-window "other-window" :color blue)
  ("q" quit-window "quit" :color blue))

(define-key Buffer-menu-mode-map "." 'hydra-buffer-menu/body)

#+END_SRC
* Darwin specific
** Start emacs server when on OS X
I was having some problems with Emacs server not finding the correct pipe in OS X. So I hacked this. it combines with the following in .bash_profile:
#+BEGIN_SRC
export ECLIENT="emacsclient -s /tmp/emacs${UID}/server -a /Applications/Emacs.app/Contents/MacOS/Emacs"
export EDITOR="$ECLIENT \$@ "
export VISUAL=$EDITOR
export GIT_EDITOR="$VISUAL +0"

function e()
{
    $ECLIENT "$@" &
}

function ew()
{
    $ECLIENT -c "$@" &
}

#+END_SRC
#+BEGIN_SRC emacs-lisp

(when (eq system-type 'darwin)
  ; Start the emacs server with a predictable pipe name
  (setq server-socket-dir (format "/tmp/emacs%d" (user-uid)))
  (server-start))
  ; And let me quit with C-c C-c when editing in server mode
;  (add-hook 'server-switch-hook '(lambda ()
;				  (local-set-key [(control c) (control c)]
;						 (lambda ()
;						   (interactive)
;						   (save-buffer)
;						   (server-edit)))))  
#+END_SRC
** Focus Emacs when we have a new emacsclient
By default, Emacs does not focus the Emacs window when we get a new emacsclient. In Darwin, in my opinion this is highly desireable, as I usually want to start editing right away.
So (from https://korewanetadesu.com/emacs-on-os-x.html):
#+BEGIN_SRC emacs-lisp
(when (featurep 'ns)
  (defun ns-raise-emacs ()
    "Raise Emacs."
    (ns-do-applescript "tell application \"Emacs\" to activate"))

  (defun ns-raise-emacs-with-frame (frame)
    "Raise Emacs and select the provided frame."
    (with-selected-frame frame
      (when (display-graphic-p)
        (ns-raise-emacs))))

  (add-hook 'after-make-frame-functions 'ns-raise-emacs-with-frame)
(add-hook 'server-visit-hook 'ns-raise-emacs)
  (when (display-graphic-p)
    (ns-raise-emacs)))

#+END_SRC
* Org-mode 
** Release keybindings
Org is quite aggressive at binding keys. Release keys that I want to use for other purposes [[http://emacs.stackexchange.com/questions/3998/how-to-remap-control-up-in-org-mode][see also SO]]
#+BEGIN_SRC emacs-lisp
(defun org-take-back-bindings ()
  (define-key org-mode-map [remap open-line] nil)
  (define-key org-mode-map [S-return] nil)
)
(eval-after-load "org" '(org-take-back-bindings))


#+END_SRC
** Locations
Need to set system-specific locations for org, as I keep everything in Dropbox and cannot do symlinks in Windows. So I set =org-directory= as a home location. I can then use this as a base for the file named in =org-agenda-files=, which lists files on each line relative to this folder.
#+BEGIN_SRC emacs-lisp
(if (eq system-type 'windows-nt) ; Actually trying to detect my work pc, may need to change this later on
  (setq org-directory (substitute-in-file-name "$USERPROFILE/Dropbox/org/"))
  (setq org-directory "~/org/")
)

(setq org-agenda-files "~/.emacs.d/org-agenda-files") ; Use a single file name, so lookup agenda files in that file (see help on org-agenda-files)
#+END_SRC
** Notes on updating org
I am using git, so org updating is something to do with =git submodule=. Google to find it. 

If you need to pull stuff for submodules into your submodule repositories use
git pull --recurse-submodules
    a feature git learned in 1.7.3.
But this will not checkout proper commits(the ones your master repository points to) in submodules
To checkout proper commits in your submodules you should update them after pulling using
git submodule update --recursive

Anyway, this is important: http://orgmode.org/worg/org-hacks.html#compiling-org-without-make
** Keybindings
We need some keybindings for org-mode. These are the suggested defaults.
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)

#+END_SRC
** Start org-mode for all .org files
Somewhat superfluous since recent Emacsen have this as default, but just in case:
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
#+END_SRC
** Org mode easy templates: source code with emacs list tag. 
This is primarily to ease editing of this single file: enter =<S= and hit =TAB= to make a source template with the =emacs-lisp= language.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist (list "S" "#+BEGIN_SRC emacs-lisp?\n\n#+END_SRC" "<src lang=\"?\">\n\n</src>" ))
#+END_SRC

** Prevent M-RET from splitting lines
I hate it when =<M-RET>= splits a line in the middle, something I never do.
#+BEGIN_SRC emacs-lisp
(setq org-M-RET-may-split-line nil)
#+END_SRC

** Use IDO mode for org
#+BEGIN_SRC emacs-lisp
(setq org-completion-use-ido t)
#+END_SRC

** Hide leading stars
#+BEGIN_SRC emacs-lisp
(setq org-hide-leading-stars t)
#+END_SRC

** Fontify src blocks
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC
** Custom agenda commands
*** Define stuck projects
#+BEGIN_SRC emacs-lisp
(setq org-stuck-projects '("Project/-DONE" nil ("NEXT") ""))
#+END_SRC
*** Daily agenda view
#+BEGIN_SRC emacs-lisp
  (if (not (boundp 'org-agenda-custom-commands)) (set 'org-agenda-custom-commands ()) )

  (push 
    '("A" "Joris' daily agenda view" (
      (todo "A" ((org-agenda-overriding-header "Wat moet er vandaag in ieder geval gebeuren:"))) 
      (tags "NEXT" ((org-agenda-overriding-header "Volgende acties voor de projecten:")))
      (stuck "" nil)) 
     ((org-agenda-prefix-format 
       '((agenda . " %i %-12:c%?-12t% s")
       (timeline . "  % s")
;       (todo . "%(concat \"[\" (format \"%-15s\" (org-format-outline-path (org-get-outline-path) 13)) \"] \")")
       (todo . "%(concat \"[\" (format \"%-15s\" (or (car (last (org-get-outline-path)))) \"\") \"] \")")
;       (tags . "%(concat \"[\" (format \"%-15s\" (org-format-outline-path (org-get-outline-path) 13)) \"] \")")
       (tags . "%(concat \"[\" (format \"%-15s\" (or (car (last (org-get-outline-path) ))) \"\") \"] \")")
       (search . " %i %-8:c"))
      )) ())       
      org-agenda-custom-commands )

#+END_SRC
** Custom TODO headers
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords
        '((sequence "B(b)" "A(a)" "C(c)" "WAITING(w)" "|" "DONE(d)" ))) 
  (setq org-todo-keyword-faces
        '(("A" . "yellow")
          ("WAITING". "orange")))
#+END_SRC
** Fast TAGS selection
Using +TAGS: NEXT(n) format helps greatly
#+BEGIN_SRC emacs-lisp
(setq org-fast-tag-selection-single-key t)
#+END_SRC
** Beginning and end of line navigation				      
#+BEGIN_SRC emacs-lisp
(setq org-special-ctrl-a/e t)
#+END_SRC
** Cycling at beginning of document
See https://github.com/jwiegley/dot-emacs/blob/master/org-settings.el
#+BEGIN_SRC emacs-lisp
(setq org-cycle-global-at-bob t)
#+END_SRC
** Pretty ellipsis
#+BEGIN_SRC emacs-lisp
(setq org-ellipsis "\u2026")    ;" \u22bf" )
;(setq org-ellipsis (quote org-tag))
#+END_SRC
** No empty lines
I do not much enjoy the empty lines that org-mode can sometimes inject based on the auto settings. Switch off empty lines for =C-RET= and =M-RET=. [[http://orgmode.org/worg/org-faq.html#blank-line-after-headlines-and-list-items][Org-mode FAQ]].
#+BEGIN_SRC emacs-lisp
(setq org-blank-before-new-entry '((heading . nil) (plain-list-item . nil)))

#+END_SRC
** Org-clock logging worked time
From [[http://orgmode.org/manual/Clocking-work-time.html][the org manual on time logging]]: make sure the clock log is persistent so that an aborted session gets recovered correctly.
#+BEGIN_SRC emacs-lisp
(setq org-clock-persist 'history)
(org-clock-persistence-insinuate)
(setq org-clock-mode-line-total 'today)
#+END_SRC

* Look and feel
** Behavior
*** Small things
These lines configure Emacs' general behavior at certain aspects.
**** Show matching parentheses
#+begin_src emacs-lisp
  ;; show matching parens
  (show-paren-mode 1)
#+end_src
**** Change yes or no to y-or-n>
#+begin_src emacs-lisp
  ;; take the short answer, y/n is yes/no
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
**** Indentation after RET
I almost always want to go to the right indentation on the next line. Disable after version 24.4 because it has a sensible default.
#+begin_src emacs-lisp
 ;; check emacs version
(when (version< emacs-version "24.4")
   (global-set-key (kbd "RET") 'newline-and-indent))
#+end_src
**** S-RET does not break line
  When using S-RET, open a new line below and jump to it
  Needs a released key because org sits on S-RET ([[*Release keybindings][Release keybindings]])
  #+BEGIN_SRC emacs-lisp
  (defun end-of-line-and-indented-new-line ()
    (interactive)
    (end-of-line)
    (comment-indent-new-line))
  (global-set-key (kbd "<S-return>") 'end-of-line-and-indented-new-line)

  #+END_SRC

***** Sentences end with a single space

  In my world, sentences end with a single space. This makes
  sentence navigation commands work for me.

  #+begin_src emacs-lisp
    (setq sentence-end-double-space nil)
  #+end_src
***** Prefer to split windows vertically
  #+BEGIN_SRC emacs-lisp
  (setq split-height-threshold 60)
  (setq split-width-threshold 90)
  #+END_SRC
***** Delete current buffer file
      Deleting current buffer and the file it is visiting using the very logical =C-x C-k=(http://whattheemacsd.com/).
  #+BEGIN_SRC emacs-lisp
  (defun delete-current-buffer-file ()
    "Removes file connected to current buffer and kills buffer."
    (interactive)
    (let ((filename (buffer-file-name))
          (buffer (current-buffer))
          (name (buffer-name)))
      (if (not (and filename (file-exists-p filename)))
          (ido-kill-buffer)
	(when (yes-or-no-p "Are you sure you want to remove this file? ")
          (delete-file filename)
          (kill-buffer buffer)
          (message "File '%s' successfully removed" filename)))))

  (global-set-key (kbd "C-x C-k") 'delete-current-buffer-file)
  #+END_SRC
***** Rename current buffer file
  As in the delete version, it's really nice to be able to rename the visited file easily. Whattheemacsd uses =C-x C-r=, which I find very reasonable.
  #+BEGIN_SRC emacs-lisp
  (defun rename-current-buffer-file ()
    "Renames current buffer and file it is visiting."
    (interactive)
    (let ((name (buffer-name))
          (filename (buffer-file-name)))
      (if (not (and filename (file-exists-p filename)))
          (error "Buffer '%s' is not visiting a file!" name)
	(let ((new-name (read-file-name "New name: " filename)))
          (if (get-buffer new-name)
              (error "A buffer named '%s' already exists!" new-name)
            (rename-file filename new-name 1)
            (rename-buffer new-name)
            (set-visited-file-name new-name)
            (set-buffer-modified-p nil)
            (message "File '%s' successfully renamed to '%s'"
                     name (file-name-nondirectory new-name)))))))

  (global-set-key (kbd "C-x C-r") 'rename-current-buffer-file)
  #+END_SRC
***** Delete to trash
  #+BEGIN_SRC emacs-lisp
  ( setq delete-by-moving-to-trash t)
  #+END_SRC
***** Join lines
  A tip from http://whattheemacsd.com/: use =M-j= to join two lines. Loses a =comment-indent-new-line=, which I will not miss.

  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "M-j")
    (lambda ()
    (interactive)
    (join-line -1)))
  #+END_SRC
****** Minimize Emacs' chrome
  Hide a lot of default Emacs chrome, so that we just start with a
  vanilla ~*scratch*~ buffer.

  #+begin_src emacs-lisp
    ;; Remove unused UI elements
   (add-hook 'window-setup-hook (lambda () (tool-bar-mode -1))) 
  ;  (tool-bar-mode 0) Conflicts with maximization on windows, so need the hook above
    (menu-bar-mode 1)
    (scroll-bar-mode 0)
    (setq inhibit-startup-message t)
  
    ;; shhht, give me some time to think, don't blink
    (blink-cursor-mode 0)
  
  #+end_src
***** Prefix kills entire line
  Comes from http://endlessparentheses.com/kill-entire-line-with-prefix-argument.html?source=rss: why should we not be able to kill entire line without C-a C-k C-k?
  #+BEGIN_SRC emacs-lisp
  (defmacro bol-with-prefix (function)
    "Define a new function which calls FUNCTION.
  Except it moves to beginning of line before calling FUNCTION when
  called with a prefix argument. The FUNCTION still receives the
  prefix argument."
    (let ((name (intern (format "endless/%s-BOL" function))))
      `(progn
	 (defun ,name (p)
           ,(format 
             "Call `%s', but move to BOL when called with a prefix argument."
             function)
           (interactive "P")
           (when p
             (forward-line 0))
           (call-interactively ',function))
	 ',name)))
  (global-set-key [remap org-kill-line] (bol-with-prefix org-kill-line))
  (global-set-key [remap kill-line] (bol-with-prefix kill-line))

  #+END_SRC
***** Meta bindings for forward and backward sexp, and delete-other-windows
  From http://endlessparentheses.com/Meta-Binds-Part-1%253A-Drunk-in-the-Dark.html
  #+BEGIN_SRC emacs-lisp
  (global-set-key "\M-9" 'backward-sexp)
  (global-set-key "\M-0" 'forward-sexp)
  (global-set-key "\M-1" 'delete-other-windows)
  #+END_SRC
***** Undo tree
  Use the undo-tree package to simplify Undoing. I have never really understood the default way op undoing anyway. Tips: C-_ to undo, M-_ to redo, C-x u to see the tree. Configuration from Sacha Chua:
  #+BEGIN_SRC emacs-lisp 
  (use-package undo-tree
    :defer t
    :ensure t
    :diminish undo-tree-mode
    :idle
    (progn
      (global-undo-tree-mode)
      (setq undo-tree-visualizer-timestamps t)
      (setq undo-tree-visualizer-diff t)))

  #+END_SRC
***** Pop To Mark
  A great little tool to find previous locations. Configuration from Sacha Chua.
  #+BEGIN_SRC emacs-lisp
  (bind-key "C-x p" 'pop-to-mark-command)
  (setq set-mark-command-repeat-pop t)

  #+END_SRC
***** Insert matched brace pairs
  The default ~M-(~ binding is really nice and deserves a parallel for the braces that I use a lot. Taken from [[http://stackoverflow.com/questions/2951797/wrapping-selecting-text-in-enclosing-characters-in-emacs][a nice stackoverflow discussion]].
  #+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-[") 'insert-pair)
  ; (global-set-key (kbd "M-{") 'insert-pair) ; disable bacause of clash with existing binding
  (global-set-key (kbd "M-\"") 'insert-pair)

  (global-set-key (kbd "M-)") 'delete-pair)
  #+END_SRC
***** Split windows open prev window
  As used by Sacha Chua and copied from [[http://www.reddit.com/r/emacs/comments/25v0eo/you_emacs_tips_and_tricks/chldury][a Reddit post]]:
  #+BEGIN_SRC emacs-lisp
  (defun my/vsplit-last-buffer (prefix)
    "Split the window vertically and display the previous buffer."
    (interactive "p")
    (split-window-vertically)
    (other-window 1 nil)
    (if (= prefix 1)
      (switch-to-next-buffer)))
  (defun my/hsplit-last-buffer (prefix)
    "Split the window horizontally and display the previous buffer."
    (interactive "p")
    (split-window-horizontally)
    (other-window 1 nil)
    (if (= prefix 1) (switch-to-next-buffer)))
  (bind-key "C-x 2" 'my/vsplit-last-buffer)
  (bind-key "C-x 3" 'my/hsplit-last-buffer)
  #+END_SRC
***** Visual line mode
  #+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'turn-on-visual-line-mode)
  (add-hook 'org-mode-hook 'turn-on-visual-line-mode)
  (setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))

  #+END_SRC
***** Expand region
  Expand-region is great!
  #+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-=" . er/expand-region)
  )

  #+END_SRC
** Theming
   (Obsolete) Make use of color-theme to make it pretty.
   Now switched to zenburn (does not require color-theme) because it better supports Org-mode. More info here: https://github.com/bbatsov/zenburn-emacs. Other options would be found here: http://orgmode.org/worg/org-color-themes.html
   #+begin_src emacs-lisp
;;    (require 'color-theme)
;;    (color-theme-initialize)
;;    (color-theme-kingsajz)
;;  (load-theme 'zenburn t)
   #+End_src
* Backups and History
** Backups
  
From Sacha Chua (https://raw.githubusercontent.com/sachac/.emacs.d/gh-pages/Sacha.org).
This is one of the things people usually want to change right away. By default, Emacs saves backup files in the current directory. These are the files ending in =~= that are cluttering up your directory lists. The following code stashes them all in =~/.emacs.d/backups=, where I can find them with =C-x C-f= (=find-file=) if I really need to.

#+begin_src emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+end_src

Disk space is cheap. Save lots.

#+begin_src emacs-lisp
(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list" t)))
#+end_src
** History
From http://www.wisdomandwonder.com/wordpress/wp-content/uploads/2014/03/C3F.html
#+begin_src emacs-lisp
(setq savehist-file "~/.emacs.d/savehist")
(savehist-mode 1)
(setq history-length t)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
      '(kill-ring
        search-ring
        regexp-search-ring))
#+end_src
* Startup
** Maximize window 
#+BEGIN_SRC emacs-lisp
 (when (eq system-type 'windows-nt)
   (tool-bar-mode 1)
   (w32-send-sys-command 61488) ; Does not work with toolbar diabled, so put that on a hook above
  )

;   (add-hook 'after-init-hook '(lambda () (w32-send-sys-command #xf030))))

;(setq initial-frame-alist (quote ((fullscreen . maximized))))

(when (eq system-type 'darwin)
(run-with-idle-timer 0.1 nil 'toggle-frame-maximized))
#+END_SRC
** Relocate custom file
Emacs customize uses this file, but it annoys me. [[http://emacsblog.org/2008/12/06/quick-tip-detaching-the-custom-file/][This tip]] really helps:
#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file 'noerror)

#+END_SRC
** Open a file with agenda on startup 
  #+begin_src emacs-lisp  :tangle no
    ;    (find-file "~/personal/organizer.org")
    ;    (require 'org-compat)
        (when (eq system-type 'windows-nt)  ;Only open file when at work: should use system-name or something
         ; Open file
         (find-file (expand-file-name "jpg.org" org-directory))
         ; run agenda command
         (run-at-time (format "%d sec" 1) nil '(lambda () (progn (org-agenda nil "A")) (other-window 1)))
        )
    ;    (add-hook 'after-init-hook '(lambda () (progn (org-agenda nil "A") (other-window 1))))
  #+end_src
* Voice recognition (VR-mode)
Voice recognition mode should help using DNS in Emacs (http://emacs-vr-mode.sourceforge.net/)
#+BEGIN_SRC emacs-lisp :tangle no
 (if (eq system-type 'windows-nt)
    (progn (add-to-list 'load-path (substitute-in-file-name "C:/Users/jpg/Documents/Progs/VR-mode/"))

      (setq vr-command "C:\\Users\\jpg\\Documents\\Progs\\VR-mode\\vr.exe")
      (setq vr-win-class "Emacs")
      (load "vr")
    ;(autoload 'vr-mode "C:/Users/jpg/Documents/Progs/VR-mode/vr" "" t nil) 
))
#+END_SRC
* Remember for later (inactive)
** Switch from horizontal to vertical split
#+BEGIN_SRC emacs-lisp :tangle no
(defun toggle-window-split ()
  (interactive)
  (if (= (count-windows) 2)
      (let* ((this-win-buffer (window-buffer))
             (next-win-buffer (window-buffer (next-window)))
             (this-win-edges (window-edges (selected-window)))
             (next-win-edges (window-edges (next-window)))
             (this-win-2nd (not (and (<= (car this-win-edges)
                                         (car next-win-edges))
                                     (<= (cadr this-win-edges)
                                         (cadr next-win-edges)))))
             (splitter
              (if (= (car this-win-edges)
                     (car (window-edges (next-window))))
                  'split-window-horizontally
                'split-window-vertically)))
        (delete-other-windows)
        (let ((first-win (selected-window)))
          (funcall splitter)
          (if this-win-2nd (other-window 1))
          (set-window-buffer (selected-window) this-win-buffer)
          (set-window-buffer (next-window) next-win-buffer)
          (select-window first-win)
          (if this-win-2nd (other-window 1))))))

#+END_SRC
   
** Font
Run through a list of preferred fonts and set the first available as
default.
#+begin_src emacs-lisp :tangle no
  (condition-case nil
      (set-default-font "Ubuntu Mono 16" t)
    (error (condition-case nil
               (set-default-font "Cousine" t)
             (error (condition-case nil
                        (set-default-font "Consolas 11" t)
                      (error nil))))))
#+end_src
** Updating Org
- Git submodule update (nog op te zoeken)
- Recompile van hier: [[http://orgmode.org/worg/org-hacks.html#compiling-org-without-make][Compiling without make]]
Easier is to use git bash, and just run make!
** yasnippet
#+begin_src emacs-lisp :tangle no
  (require 'yasnippet)
  (yas/global-mode 1)
#+end_src

Add custom snippets
#+begin_src emacs-lisp :tangle no
  (yas/load-directory (expand-file-name "snippets" dotfiles-dir))
#+end_src

yasnippet and org-mode don't play well together when using TAB for
completion. This should fix it:
#+begin_src emacs-lisp :tangle no
  ;; (defun yas/org-very-safe-expand ()
  ;;                  (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))
  ;; (add-hook 'org-mode-hook
  ;;           (lambda ()
  ;;             (make-variable-buffer-local 'yas/trigger-key)
  ;;             (setq yas/trigger-key [tab])
  ;;             (add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
  ;;             (define-key yas/keymap [tab] 'yas/next-field)))
  
#+end_src
